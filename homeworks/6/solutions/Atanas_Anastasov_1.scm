(define (fls pred? lst)  
  (define (helper l)
    (cond ((null? l) '())
          ((eq? (car l) #f) (helper (cdr l)))
          (else (cons (car l) (helper (cdr l)))))
  )
  (helper (map (lambda(x)(if (pred? x) x #f)) lst))
  )
(define (my_odd? x)
  (if (= (remainder x 2) 0) #f #t))   

(fls (lambda (x)(< x 3)) '(1 2 3 4 5 6))
(fls my_odd? '(1 2 3 4 5 6))
(fls my_odd? '(2))