(define (permutations l)
  (define (insert elem l)
    (if (null? l)
      (list (list elem))
      (cons (cons elem l)
            (map (lambda (perm) (cons (car l) perm))
                 (insert elem (cdr l))))))

  (cond ((null? l) '())
        ((null? (cdr l)) (list l))
        (else (apply append (map (lambda (perm) (insert (car l) perm))
                                 (permutations (cdr l)))))))

; по-неоптимално, но елегантно решение
(define (permutations l)
  (define (remove x l)
    (cond ((null? l) x)
          ((eq? x (car l)) (cdr l))
          (else (cons (car l) (remove x (cdr l))))))
  (if (null? l)
    '(())
    (apply append (map (lambda (x)
                         (map (lambda (p) (cons x p))
                              (permutations (remove x l))))
                       l))))
