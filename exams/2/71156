; 0.9 (6)

(define (component i G)
  (define (get-connected i G)
    (filter (lambda (e) (or (= i (car e)) (= i (cdr e)))) G)
  )
  (define (helper i visited)
    (let* ((connected (get-connected i G))
           (fclean (map (lambda (e) (if (= i (car e)) (cdr e) (car e))) connected))
           (filtered (filter (lambda (c) (not (memv c visited))) fclean)))
      (if  (null? filtered) '()
           (let ((new-visited (cons i (append filtered visited))))
             (append filtered (apply append '() (map (lambda (nv) (helper nv new-visited)) filtered)))
           )
       )
    )
  )
  (cons i (helper i '())  )
)

(define G '((1 . 2) (1 . 3) (2 . 3) (3 . 4) (5 . 7) (5 . 6) (6 . 7) (8 . 7) (9 . 10) (10 . 11) (12 . 13) (13 . 12)))

;(component 12 G)
