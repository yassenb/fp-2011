(define (make-entry key value)
  (list key value)
)

(define (get-key entry)
  (car entry)
)

(define (get-value entry)
  (cdr entry)
)

(define (find-key m key)
  (define (helper m)
    (cond ((= (length m) 0) '())
          ((equal? (get-key (car m)) key) (get-value (car m)))
          (else (helper (cdr m)))
    )
  )
  (helper m)
)

(define (eliminate-doubles lst_full)
  (define (helper lst res)
    (cond ((null? lst) res)
          ((member (car lst) res) (helper (cdr lst) res))
          (else (helper (cdr lst) (cons (car lst) res)))
    )
   )
  (helper lst_full '())
 )

(define (merge x y)
  (define (helper res rest)
    (cond ((= (length rest) 0) res)
       ((null? (find-key x (get-key (car res)))) (helper (cons (make-entry (get-key (car res)) (append (get-value (car res)) (find-key x (get-key (car res))))) res) (cdr rest)))
       (else (helper (cons (car res) res) (cdr rest)))
     )
   )
  (helper x y)
)

(define x (list (make-entry 'natural '(1 2 3)) (make-entry 'negative '(-1 -2 -3))))
(define y (list (make-entry 'natural '(3 4 5)) (make-entry 'zero '(0))))

(display (merge x y))